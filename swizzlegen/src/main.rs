use std::fs::File;
use std::io::{Result, Write};

const E: [char; 4] = ['x', 'y', 'z', 'w']; // element name
const B: [&str; 4] = ["00", "01", "10", "11"]; // shuffle bits
const V: [&str; 4] = ["1.0", "2.0", "3.0", "4.0"]; //element value

// const VEC4: &str = "Vec4";
// const VEC3A: &str = "Vec3A";
// const VEC3: &str = "Vec3";
// const VEC2: &str = "Vec2";

fn write_swizzle_head(out: &mut impl Write) -> Result<()> {
    writeln!(out, "// Generated by swizzlegen. Do not edit.")?;
    Ok(())
}

fn write_loops<W, F4, F3, F2>(
    out: &mut W,
    size: usize,
    vec4fn: F4,
    vec3fn: F3,
    vec2fn: F2,
) -> Result<()>
where
    W: Write,
    F4: Fn(&mut W, usize, usize, usize, usize) -> Result<()>,
    F3: Fn(&mut W, usize, usize, usize) -> Result<()>,
    F2: Fn(&mut W, usize, usize) -> Result<()>,
{
    for e0 in 0..size {
        for e1 in 0..size {
            for e2 in 0..size {
                for e3 in 0..size {
                    if size == 4 && e0 == 0 && e1 == 1 && e2 == 2 && e3 == 3 {
                        continue;
                    }
                    vec4fn(out, e0, e1, e2, e3)?;
                }
            }
        }
    }

    for e0 in 0..size {
        for e1 in 0..size {
            for e2 in 0..size {
                if size == 3 && e0 == 0 && e1 == 1 && e2 == 2 {
                    continue;
                }
                vec3fn(out, e0, e1, e2)?;
            }
        }
    }

    for e0 in 0..size {
        for e1 in 0..size {
            if size == 2 && e0 == 0 && e1 == 1 {
                continue;
            }
            vec2fn(out, e0, e1)?;
        }
    }

    Ok(())
}

fn write_swizzle_trait(
    out: &mut impl Write,
    size: usize,
    vec4t: &str,
    vec3t: &str,
    vec2t: &str,
) -> Result<()> {
    let t = match size {
        4 => vec4t,
        3 => vec3t,
        2 => vec2t,
        _ => unreachable!(),
    };

    writeln!(out, r#"pub trait {}Swizzles {{"#, t)?;

    if size != 2 {
        writeln!(out, r#"    type Vec2;"#)?;
    }

    if size != 3 {
        writeln!(out, r#"    type Vec3;"#)?;
    }

    if size != 4 {
        writeln!(out, r#"    type Vec4;"#)?;
    }

    write_loops(
        out,
        size,
        |out, e0, e1, e2, e3| {
            write!(
                out,
                r#"
    fn {}{}{}{}(self) -> {};"#,
                E[e0],
                E[e1],
                E[e2],
                E[e3],
                if size == 4 { "Self" } else { "Self::Vec4" }
            )
        },
        |out, e0, e1, e2| {
            write!(
                out,
                r#"
    fn {}{}{}(self) -> {};"#,
                E[e0],
                E[e1],
                E[e2],
                if size == 3 { "Self" } else { "Self::Vec3" }
            )
        },
        |out, e0, e1| {
            write!(
                out,
                r#"
    fn {}{}(self) -> {};"#,
                E[e0],
                E[e1],
                if size == 2 { "Self" } else { "Self::Vec2" }
            )
        },
    )?;

    writeln!(
        out,
        r#"
}}"#
    )?;

    Ok(())
}

fn write_vec4_impl_scalar(
    out: &mut impl Write,
    vec4t: &str,
    vec3t: &str,
    vec2t: &str,
) -> Result<()> {
    const SIZE: usize = 4;

    write_swizzle_head(out)?;

    write!(
        out,
        r#"
use super::Vec4Swizzles;
use crate::{{{}, {}, {}, XY, XYZ, XYZW}};
"#,
        vec2t, vec3t, vec4t,
    )?;

    write!(
        out,
        r#"
impl Vec4Swizzles for {} {{
    type Vec2 = {};
    type Vec3 = {};
"#,
        vec4t, vec2t, vec3t,
    )?;

    write_loops(
        out,
        SIZE,
        |out, e0, e1, e2, e3| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}{}{}(self) -> {} {{
        {}(XYZW {{
            x: self.{},
            y: self.{},
            z: self.{},
            w: self.{},
        }})
    }}"#,
                E[e0], E[e1], E[e2], E[e3], vec4t, vec4t, E[e0], E[e1], E[e2], E[e3],
            )
        },
        |out, e0, e1, e2| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}{}(self) -> {} {{
        {}(XYZ {{
            x: self.{},
            y: self.{},
            z: self.{},
        }})
    }}"#,
                E[e0], E[e1], E[e2], vec3t, vec3t, E[e0], E[e1], E[e2]
            )
        },
        |out, e0, e1| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}(self) -> {} {{
        {}(XY {{
            x: self.{},
            y: self.{},
        }})
    }}"#,
                E[e0], E[e1], vec2t, vec2t, E[e0], E[e1]
            )
        },
    )?;

    write!(out, "\n}}\n")?;

    Ok(())
}

fn write_vec4_impl_sse2(out: &mut impl Write) -> Result<()> {
    const SIZE: usize = 4;

    write_swizzle_head(out)?;

    write!(
        out,
        r#"
use super::Vec4Swizzles;
use crate::{{Vec2, Vec3, Vec4}};

#[cfg(target_arch = "x86")]
use core::arch::x86::*;
#[cfg(target_arch = "x86_64")]
use core::arch::x86_64::*;
"#
    )?;

    write!(
        out,
        r#"
impl Vec4Swizzles for Vec4 {{
    type Vec2 = Vec2;
    type Vec3 = Vec3;
"#,
    )?;

    write_loops(
        out,
        SIZE,
        |out, e0, e1, e2, e3| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}{}{}(self) -> Vec4 {{
        unsafe {{ Vec4(_mm_shuffle_ps(self.0, self.0, 0b{}_{}_{}_{})) }}
    }}"#,
                E[e0], E[e1], E[e2], E[e3], B[e3], B[e2], B[e1], B[e0],
            )
        },
        |out, e0, e1, e2| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}{}(self) -> Vec3 {{
        unsafe {{ Vec3::from(Vec4(_mm_shuffle_ps(self.0, self.0, 0b00_{}_{}_{}))) }}
    }}"#,
                E[e0], E[e1], E[e2], B[e2], B[e1], B[e0],
            )
        },
        |out, e0, e1| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}(self) -> Vec2 {{
        unsafe {{ Vec2::from(Vec4(_mm_shuffle_ps(self.0, self.0, 0b00_00_{}_{}))) }}
    }}"#,
                E[e0], E[e1], B[e1], B[e0],
            )
        },
    )?;

    write!(out, "\n}}\n")?;

    Ok(())
}

fn write_vec3a_impl_sse2(out: &mut impl Write) -> Result<()> {
    const SIZE: usize = 3;

    write_swizzle_head(out)?;

    write!(
        out,
        r#"
use super::Vec3Swizzles;
use crate::{{Vec2, Vec3A, Vec4}};

#[cfg(all(vec3a_sse2, target_arch = "x86"))]
use core::arch::x86::*;
#[cfg(all(vec3a_sse2, target_arch = "x86_64"))]
use core::arch::x86_64::*;
"#
    )?;

    write!(
        out,
        r#"
impl Vec3Swizzles for Vec3A {{
    type Vec2 = Vec2;
    type Vec4 = Vec4;
"#
    )?;

    write_loops(
        out,
        SIZE,
        |out, e0, e1, e2, e3| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}{}{}(self) -> Vec4 {{
        unsafe {{ Vec4(_mm_shuffle_ps(self.0, self.0, 0b{}_{}_{}_{})) }}
    }}"#,
                E[e0], E[e1], E[e2], E[e3], B[e3], B[e2], B[e1], B[e0],
            )
        },
        |out, e0, e1, e2| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}{}(self) -> Self {{
        unsafe {{ Self(_mm_shuffle_ps(self.0, self.0, 0b00_{}_{}_{})) }}
    }}"#,
                E[e0], E[e1], E[e2], B[e2], B[e1], B[e0],
            )
        },
        |out, e0, e1| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}(self) -> Vec2 {{
        unsafe {{ Vec2::from(Vec3A(_mm_shuffle_ps(self.0, self.0, 0b00_00_{}_{}))) }}
    }}"#,
                E[e0], E[e1], B[e1], B[e0],
            )
        },
    )?;

    write!(out, "\n}}\n")?;

    Ok(())
}

fn write_vec3_impl_scalar(
    out: &mut impl Write,
    vec4t: &str,
    vec3t: &str,
    vec2t: &str,
) -> Result<()> {
    const SIZE: usize = 3;

    write_swizzle_head(out)?;

    write!(
        out,
        r#"
use super::Vec3Swizzles;
use crate::{{{}, {}, {}, XY, XYZ}};
"#,
        vec2t, vec3t, vec4t
    )?;

    write!(
        out,
        r#"
impl Vec3Swizzles for {} {{
    type Vec2 = {};
    type Vec4 = {};
"#,
        vec3t, vec2t, vec4t,
    )?;

    write_loops(
        out,
        SIZE,
        |out, e0, e1, e2, e3| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}{}{}(self) -> {} {{
        {}::new(self.{}, self.{}, self.{}, self.{})
    }}"#,
                E[e0], E[e1], E[e2], E[e3], vec4t, vec4t, E[e0], E[e1], E[e2], E[e3],
            )
        },
        |out, e0, e1, e2| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}{}(self) -> Self {{
        Self(XYZ {{
            x: self.{},
            y: self.{},
            z: self.{},
        }})
    }}"#,
                E[e0], E[e1], E[e2], E[e0], E[e1], E[e2]
            )
        },
        |out, e0, e1| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}(self) -> {} {{
        {}(XY {{
            x: self.{},
            y: self.{},
        }})
    }}"#,
                E[e0], E[e1], vec2t, vec2t, E[e0], E[e1]
            )
        },
    )?;

    write!(out, "\n}}\n")?;

    Ok(())
}

fn write_vec2_impl_scalar(
    out: &mut impl Write,
    vec4t: &str,
    vec3t: &str,
    vec2t: &str,
) -> Result<()> {
    const SIZE: usize = 2;

    write_swizzle_head(out)?;

    write!(
        out,
        r#"
use super::Vec2Swizzles;
use crate::{{{}, {}, {}, XY, XYZ}};
"#,
        vec2t, vec3t, vec4t,
    )?;

    write!(
        out,
        r#"
impl Vec2Swizzles for {} {{
    type Vec3 = {};
    type Vec4 = {};
"#,
        vec2t, vec3t, vec4t,
    )?;

    write_loops(
        out,
        SIZE,
        |out, e0, e1, e2, e3| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}{}{}(self) -> {} {{
        {}::new(self.{}, self.{}, self.{}, self.{})
    }}"#,
                E[e0], E[e1], E[e2], E[e3], vec4t, vec4t, E[e0], E[e1], E[e2], E[e3],
            )
        },
        |out, e0, e1, e2| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}{}(self) -> {} {{
        {}(XYZ {{
            x: self.{},
            y: self.{},
            z: self.{},
        }})
    }}"#,
                E[e0], E[e1], E[e2], vec3t, vec3t, E[e0], E[e1], E[e2]
            )
        },
        |out, e0, e1| {
            write!(
                out,
                r#"
    #[inline]
    fn {}{}(self) -> Self {{
        Self(XY {{
            x: self.{},
            y: self.{},
        }})
    }}"#,
                E[e0], E[e1], E[e0], E[e1]
            )
        },
    )?;

    write!(out, "\n}}\n")?;

    Ok(())
}

fn write_swizzle_traits() -> Result<()> {
    let mut out = File::create("../src/swizzles/vec_traits.rs")?;
    write_swizzle_head(&mut out)?;
    write_swizzle_trait(&mut out, 2, "Vec4", "Vec3", "Vec2")?;
    write_swizzle_trait(&mut out, 3, "Vec4", "Vec3", "Vec2")?;
    write_swizzle_trait(&mut out, 4, "Vec4", "Vec3", "Vec2")?;

    Ok(())
}

fn write_swizzle_impls() -> Result<()> {
    let mut out = File::create("../src/swizzles/vec4_impl_scalar.rs")?;
    write_vec4_impl_scalar(&mut out, "Vec4", "Vec3", "Vec2")?;

    let mut out = File::create("../src/swizzles/vec3_impl_scalar.rs")?;
    write_vec3_impl_scalar(&mut out, "Vec4", "Vec3", "Vec2")?;

    let mut out = File::create("../src/swizzles/vec3a_impl_scalar.rs")?;
    write_vec3_impl_scalar(&mut out, "Vec4", "Vec3A", "Vec2")?;

    let mut out = File::create("../src/swizzles/vec2_impl_scalar.rs")?;
    write_vec2_impl_scalar(&mut out, "Vec4", "Vec3", "Vec2")?;

    let mut out = File::create("../src/swizzles/vec4_impl_sse2.rs")?;
    write_vec4_impl_sse2(&mut out)?;

    let mut out = File::create("../src/swizzles/vec3a_impl_sse2.rs")?;
    write_vec3a_impl_sse2(&mut out)?;

    Ok(())
}

fn write_test_vec4(out: &mut impl Write, vec4t: &str, vec3t: &str, vec2t: &str) -> Result<()> {
    const SIZE: usize = 4;

    write!(
        out,
        r#"
#[test]
fn test_{}_swizzles() {{
    let v = {}(1.0, 2.0, 3.0, 4.0);
"#,
        vec4t, vec4t,
    )?;

    write_test_loops(out, SIZE, vec4t, vec3t, vec2t)?;

    writeln!(out, "}}")?;

    Ok(())
}

fn write_test_vec3(out: &mut impl Write, vec4t: &str, vec3t: &str, vec2t: &str) -> Result<()> {
    const SIZE: usize = 3;

    write!(
        out,
        r#"
#[test]
fn test_{}_swizzles() {{
    let v = {}(1.0, 2.0, 3.0);
"#,
        vec3t, vec3t,
    )?;

    write_test_loops(out, SIZE, vec4t, vec3t, vec2t)?;

    writeln!(out, "}}")?;

    Ok(())
}

fn write_test_vec2(out: &mut impl Write, vec4t: &str, vec3t: &str, vec2t: &str) -> Result<()> {
    const SIZE: usize = 2;

    write!(
        out,
        r#"
#[test]
fn test_{}_swizzles() {{
    let v = {}(1.0, 2.0);
"#,
        vec2t, vec2t,
    )?;

    write_test_loops(out, SIZE, vec4t, vec3t, vec2t)?;

    writeln!(out, "}}")?;

    Ok(())
}

fn write_test_loops(
    out: &mut impl Write,
    size: usize,
    vec4t: &str,
    vec3t: &str,
    vec2t: &str,
) -> Result<()> {
    write_loops(
        out,
        size,
        |out, e0, e1, e2, e3| {
            writeln!(
                out,
                "    assert_eq!(v.{}{}{}{}(), {}({}, {}, {}, {}));",
                E[e0], E[e1], E[e2], E[e3], vec4t, V[e0], V[e1], V[e2], V[e3]
            )
        },
        |out, e0, e1, e2| {
            writeln!(
                out,
                "    assert_eq!(v.{}{}{}(), {}({}, {}, {}));",
                E[e0], E[e1], E[e2], vec3t, V[e0], V[e1], V[e2]
            )
        },
        |out, e0, e1| {
            writeln!(
                out,
                "    assert_eq!(v.{}{}(), {}({}, {}));",
                E[e0], E[e1], vec2t, V[e0], V[e1]
            )
        },
    )
}

fn write_swizzle_tests() -> Result<()> {
    let mut out = File::create("../tests/swizzle.rs")?;
    write_swizzle_head(&mut out)?;
    writeln!(
        &mut out,
        r#"use glam::{{swizzles::*, vec2, vec3, vec3a, vec4}};"#
    )?;
    write_test_vec4(&mut out, "vec4", "vec3", "vec2")?;
    write_test_vec3(&mut out, "vec4", "vec3a", "vec2")?;
    write_test_vec3(&mut out, "vec4", "vec3", "vec2")?;
    write_test_vec2(&mut out, "vec4", "vec3", "vec2")?;
    Ok(())
}

fn main() -> Result<()> {
    write_swizzle_traits()?;
    write_swizzle_impls()?;
    write_swizzle_tests()?;
    Ok(())
}
